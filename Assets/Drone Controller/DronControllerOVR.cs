//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Drone Controller/DronControllerOVR.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DronControllerOVR: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DronControllerOVR()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DronControllerOVR"",
    ""maps"": [
        {
            ""name"": ""DroneControlle"",
            ""id"": ""f830573d-7657-4df8-b2a3-e380e0a42672"",
            ""actions"": [
                {
                    ""name"": ""PrimaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""f058ea69-776f-46b8-98ff-c593c1774395"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""80e9945b-4148-4bd8-9d20-5dd03f76ba10"",
                    ""path"": ""<OculusTouchController>{RightHand}/primaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DroneControlle
        m_DroneControlle = asset.FindActionMap("DroneControlle", throwIfNotFound: true);
        m_DroneControlle_PrimaryButton = m_DroneControlle.FindAction("PrimaryButton", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DroneControlle
    private readonly InputActionMap m_DroneControlle;
    private List<IDroneControlleActions> m_DroneControlleActionsCallbackInterfaces = new List<IDroneControlleActions>();
    private readonly InputAction m_DroneControlle_PrimaryButton;
    public struct DroneControlleActions
    {
        private @DronControllerOVR m_Wrapper;
        public DroneControlleActions(@DronControllerOVR wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryButton => m_Wrapper.m_DroneControlle_PrimaryButton;
        public InputActionMap Get() { return m_Wrapper.m_DroneControlle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DroneControlleActions set) { return set.Get(); }
        public void AddCallbacks(IDroneControlleActions instance)
        {
            if (instance == null || m_Wrapper.m_DroneControlleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DroneControlleActionsCallbackInterfaces.Add(instance);
            @PrimaryButton.started += instance.OnPrimaryButton;
            @PrimaryButton.performed += instance.OnPrimaryButton;
            @PrimaryButton.canceled += instance.OnPrimaryButton;
        }

        private void UnregisterCallbacks(IDroneControlleActions instance)
        {
            @PrimaryButton.started -= instance.OnPrimaryButton;
            @PrimaryButton.performed -= instance.OnPrimaryButton;
            @PrimaryButton.canceled -= instance.OnPrimaryButton;
        }

        public void RemoveCallbacks(IDroneControlleActions instance)
        {
            if (m_Wrapper.m_DroneControlleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDroneControlleActions instance)
        {
            foreach (var item in m_Wrapper.m_DroneControlleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DroneControlleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DroneControlleActions @DroneControlle => new DroneControlleActions(this);
    public interface IDroneControlleActions
    {
        void OnPrimaryButton(InputAction.CallbackContext context);
    }
}
